/**
 * Plugin: autodetect Instagram Full Pro (MIMI BTS)
 * Autor: KekoOfficial
 * Funci√≥n: Detecta enlaces de Instagram autom√°ticamente, muestra info y descarga medios
 */

import fetch from 'node-fetch'

const processedLinks = {}

async function fetchJoseDev(url) {
  const apiURL = `https://api.josedev.xyz/ig?url=${encodeURIComponent(url)}`
  const res = await fetch(apiURL)
  if (!res.ok) throw new Error(`JoseDev API error ${res.status}`)
  const data = await res.json()
  if (!data?.result) throw new Error('JoseDev no devolvi√≥ datos v√°lidos')
  return Array.isArray(data.result) ? data.result : [data.result]
}

async function fetchSylphy(url) {
  const apiURL = `https://api.sylphy.xyz/ig?url=${encodeURIComponent(url)}&apikey=sylphy-fbb9`
  const res = await fetch(apiURL)
  if (!res.ok) throw new Error(`Sylphy API error ${res.status}`)
  const data = await res.json()
  if (!data?.data) throw new Error('Sylphy no devolvi√≥ datos v√°lidos')
  return Array.isArray(data.data) ? data.data : [data.data]
}

const plugin = {
  name: "autodetect-ig-full-mimi",
  all: true,

  async run(sock, m) {
    if (!m.text) return

    const regex = /https?:\/\/(www\.)?instagram\.com\/(p|reel|tv|stories|[^\/]+)\/?[\w-]*/gi
    const urls = m.text.match(regex)
    if (!urls?.length) return

    for (let url of urls) {
      if (processedLinks[m.chat]?.includes(url)) continue
      processedLinks[m.chat] = processedLinks[m.chat] || []
      processedLinks[m.chat].push(url)

      await sock.sendMessage(m.chat, { text: "‚è≥ Ooh~ detect√© un enlace de Instagram. Analizando contenido kawaii üíñ" }, { quoted: m })

      let mediaList = []
      try {
        // Intentar JoseDev primero
        mediaList = await fetchJoseDev(url)
      } catch {
        try {
          // Fallback a Sylphy
          mediaList = await fetchSylphy(url)
        } catch (e) {
          console.error("‚ùå Error IG MIMI BTS:", e)
          await sock.sendMessage(m.chat, { text: `‚ö†Ô∏è Oops~ algo sali√≥ mal üíú\nMIMI no pudo procesar tu enlace.\nError: ${e.message}` }, { quoted: m })
          continue
        }
      }

      // Mostrar info de usuario si est√° disponible
      const infoText = mediaList[0]?.user
        ? `üìå Usuario: ${mediaList[0].user}\nüìÖ Fecha: ${mediaList[0].date || 'Desconocida'}\n‚ù§Ô∏è Likes: ${mediaList[0].likes || 'Desconocidos'}\nüí¨ Comentarios: ${mediaList[0].comments || 'Desconocidos'}\nüîó Tipo: ${mediaList[0].type || 'Desconocido'}`
        : 'üìå Informaci√≥n no disponible para este post'

      await sock.sendMessage(m.chat, { text: infoText }, { quoted: m })

      for (let i = 0; i < mediaList.length; i++) {
        const media = mediaList[i]
        const isVideo = media.type === 'video'
        const mediaKey = isVideo ? 'video' : 'image'
        const caption = mediaList.length > 1
          ? `üî• Carrusel kawaii: elemento ${i + 1} de ${mediaList.length}`
          : `‚úÖ Descarga completada kawaii üíñ`

        await sock.sendMessage(m.chat, {
          [mediaKey]: { url: media.url },
          caption,
          mimetype: isVideo ? 'video/mp4' : 'image/jpeg'
        }, { quoted: m })

        if (mediaList.length > 1) await new Promise(res => setTimeout(res, 1000))
      }
    }
  }
}

export default plugin