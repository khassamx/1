/**
 * Plugin: autodetect Instagram Full Pro
 * Autor: KekoOfficial
 * Funci√≥n: Detecta enlaces de Instagram autom√°ticamente, muestra info y descarga medios
 */

import dyluxApi from 'api-dylux'

const processedLinks = {} // Evita descargas repetidas por chat

const plugin = {
  name: "autodetect-ig-full",
  all: true, // Se ejecuta en todos los mensajes

  async run(sock, m) {
    if (!m.text) return

    // Regex para detectar enlaces de Instagram
    const regex = /https?:\/\/(www\.)?instagram\.com\/(p|reel|tv|stories|[^\/]+)\/?[\w-]*/gi
    const urls = m.text.match(regex)
    if (!urls || urls.length === 0) return

    for (let url of urls) {
      // Evitar repetici√≥n
      if (processedLinks[m.chat]?.includes(url)) continue
      processedLinks[m.chat] = processedLinks[m.chat] || []
      processedLinks[m.chat].push(url)

      await sock.sendMessage(m.chat, { text: "‚è≥ Detect√© un enlace de Instagram. Analizando contenido..." }, { quoted: m })

      try {
        const res = await dyluxApi.igdl(url)
        if (!res || (Array.isArray(res) && res.length === 0)) {
          await sock.sendMessage(m.chat, { text: "‚ùå No se pudo descargar el contenido. Aseg√∫rate que sea p√∫blico." }, { quoted: m })
          continue
        }

        const mediaList = Array.isArray(res) ? res : [res]

        // Mostrar info del post si la API la devuelve
        const infoText = res.info ? 
          `üìå Usuario: ${res.info.user || 'Desconocido'}\n` +
          `üìÖ Fecha: ${res.info.date || 'Desconocida'}\n` +
          `‚ù§Ô∏è Likes: ${res.info.likes || 'Desconocidos'}\n` +
          `üí¨ Comentarios: ${res.info.comments || 'Desconocidos'}\n` +
          `üîó Tipo: ${res.info.type || 'Desconocido'}`
          : 'üìå Informaci√≥n no disponible para este post'

        await sock.sendMessage(m.chat, { text: infoText }, { quoted: m })

        for (let i = 0; i < mediaList.length; i++) {
          const media = mediaList[i]
          const isVideo = media.type === 'video'
          const mediaKey = isVideo ? 'video' : 'image'
          const caption = mediaList.length > 1
            ? `üî• Carrusel detectado: elemento ${i + 1} de ${mediaList.length}`
            : `‚úÖ Descarga completada.`

          await sock.sendMessage(m.chat, {
            [mediaKey]: { url: media.url },
            caption,
            mimetype: isVideo ? 'video/mp4' : 'image/jpeg'
          }, { quoted: m })

          // Retraso entre elementos del carrusel
          if (mediaList.length > 1) await new Promise(res => setTimeout(res, 1000))
        }

      } catch (e) {
        console.error("‚ùå Error autodetect Instagram Full:", e)
        await sock.sendMessage(m.chat, { text: `‚ö†Ô∏è Error al procesar el enlace.\nDetalles: ${e.message}` }, { quoted: m })
      }
    }
  }
}

export default plugin