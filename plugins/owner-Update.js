import path from 'path'
import { fileURLToPath } from 'url'
import { execSync } from 'child_process'
import fetch from 'node-fetch'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)
const ROOT = path.resolve(__dirname, '..')

// üåê Miniatura de contacto
async function makeFkontak() {
  try {
    const res = await fetch('https://raw.githubusercontent.com/WillZek/Storage-CB2/main/images/d110942e81b3.jpg')
    const thumb2 = Buffer.from(await res.arrayBuffer())
    return {
      key: { participants: '0@s.whatsapp.net', remoteJid: 'status@broadcast', fromMe: false, id: 'Mally-Update' },
      message: { locationMessage: { name: '‚öôÔ∏è Actualizaci√≥n del sistema', jpegThumbnail: thumb2 } },
      participant: '0@s.whatsapp.net'
    }
  } catch {
    return null
  }
}

// üßÆ Contadores globales
global.mallyUpdates = global.mallyUpdates || 0
global.mallyMessages = global.mallyMessages || 0

// üìç Canal de WhatsApp donde se enviar√° la actualizaci√≥n
const CANAL_WHATSAPP = '120363045678901234@g.us' // üëà reemplaza con el JID de tu canal

// üíª Handler principal
let handler = async (m, { conn, args }) => {
  try {
    global.mallyMessages++

    // Mensaje inicial con bot√≥n
    await conn.reply(m.chat, '‚è≥ *Buscando actualizaciones...*', m, rcanalw)

    // Ejecutar git pull
    const cmd = 'git --no-pager pull --rebase --autostash' + (args?.length ? ' ' + args.join(' ') : '')
    const output = execSync(cmd, { cwd: ROOT, encoding: 'utf8' })

    const lower = output.toLowerCase()
    const isUpToDate = lower.includes('already up to date') || lower.includes('up to date')
    let response

    // ===============================
    // üå∏ Caso 1: Ya est√° actualizado
    // ===============================
    if (isUpToDate) {
      response = `
1Ô∏è‚É£ ‚úÖ *Mally Bot* ya est√° completamente actualizada üå∏

üí¨ *Mensajes procesados:* ${global.mallyMessages}
üßÆ *Total de actualizaciones:* ${global.mallyUpdates}

‚ú® Todo est√° al d√≠a y funcionando a la perfecci√≥n üíñ
`
    } 
    // ===============================
    // üåü Caso 2: Se aplicaron actualizaciones
    // ===============================
    else {
      global.mallyUpdates++
      const changed = []
      const lines = output.split(/\r?\n/)
      for (const ln of lines) {
        const match = ln.match(/^\s*([A-Za-z0-9_\-./]+)\s*\|\s*\d+/)
        if (match && match[1] && !changed.includes(match[1])) changed.push(match[1])
      }

      const banner = [
        '‚ï≠‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ',
        '       üå∏ *Se han aplicado actualizaciones* üå∏',
        '‚ï∞‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚Ä¢ ‚Ä¢ ‚Ä¢ ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ‚îÑ',
        '',
        'üìÇ *Archivos actualizados:*'
      ]
      const list = changed.slice(0, 10).map(f => `‚úÖ ${f}`).join('\n') || '‚úÖ Ning√∫n archivo relevante'

      response = `
2Ô∏è‚É£ üÜô *Mally Bot se actualiz√≥ correctamente* üå∏

${banner.join('\n')}
${list}

üßÆ *Total de actualizaciones:* ${global.mallyUpdates}
üí¨ *Mensajes procesados:* ${global.mallyMessages}

üöÄ *Mally Bot ahora est√° lista para brillar a√∫n m√°s!* üíñ
`
    }

    const fkontak = await makeFkontak().catch(() => null)

    // üì§ Enviar al canal de WhatsApp
    if (m.chat !== CANAL_WHATSAPP) {
      await conn.reply(m.chat, '‚ö†Ô∏è *Solo el canal autorizado puede recibir la actualizaci√≥n completa.*', m, rcanalw)
      await conn.sendMessage(CANAL_WHATSAPP, { text: response.trim(), ...fkontak }, { quoted: m })
    } else {
      await conn.reply(m.chat, response.trim(), fkontak || m, rcanalw)
    }

  } catch (error) {
    const msg = /not a git repository/i.test(error?.message || '')
      ? '‚ùå *Este directorio no es un repositorio Git.*\nUsa `git init` y agrega el remoto antes de usar `update`.'
      : `‚ùå *Error al actualizar:*\n${error?.message || 'Error desconocido.'}`
    await conn.reply(m.chat, msg, m, rcanalw)
  }
}

// üìö Metadatos
handler.help = ['update', 'actualizar']
handler.tags = ['owner']
handler.command = /^(update|actualizar|up)$/i
handler.rowner = true

export default handler